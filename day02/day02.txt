1.git指令
 1)git仓库的状态与区域
 3个区域:
    工作区:工作的区域,我们用于写作代码的空间
    暂存区(stage):
    当前HEAD指向的分支:
 4个状态:
   1.unmodified:工作区以及暂存区中没有任何需要提交的
   修改,工作区很干净
   2.untracked:仓库中有新建的文件,但是还没有提交过,
   没有被纳入到git的控制之中
   3.modified:有文件被修改,但是还没有提交到暂存区
   4.staged:工作区的修改已经被提交到暂存区,即:已经执行
   过git add 命令,正在等待被提交到master上
  2)撤销修改
    1.撤销工作区的修改
      git checkout -- 文件名
      文件修改以后,没有被执行git add指令

    2.撤销暂存区的修改
      文件已经被修改,并且已经执行过git add,但是还没有
      执行过git commit -m 
      分两步:
      撤销暂存操作:
      git reset HEAD 文件名 (撤销到工作区)
      撤销工作区的修改
      git checkout -- 文件名

    3.撤销master的修改
      无法撤销,可以通过版本回退的方式,
      撤销前先查看提交的id，确定需要回退到哪个版本
      git reset --hard 提交的id 只需6-8位
  3)查看提交信息/存盘点
      git log
      如果查询的提交过多,无法一次性全部显示,
      可以按shift+q提前结束
      如果提交信息过多:
      git log --pretty=oneline
  4)关于存盘点(HEAD)
      实现版本的控制
      git中把每一次的提交都会串成一条时间线,这个时间线
      就是一条分支,默认只有一条分支master，也称之为主分支
      而HEAD指向的就是当前分支
  5)分支
    1.创建分支
     git branch 分支名
     将当前所在的分支复制一条新的分支出来
    2.查看当前所有的分支
      git branch
      其中前面有*的表示当前所在分支
    3.切换分支
      git checkout 分支名称
      在分支上的操作,不会影响到其他分支上的数据
    4.合并分支
      git merge 分支名称
      将指定名称的分支的内容合并到当前分支
      举例:在master分支下,使用 git merge v1
      合并之前v1一定要提交
      将v1分支的内容合并到master中去
      master分支的内容发生改变,v1分支内容不会改变
    5.删除分支
    git branch -d 分支名称
    删除指定分支(不能删除当前所在的分支)
    git branch -D 分支名称
    强制删除未合并的分支(不能删除当前所在的分支)

    
2.GitHub的使用
  https://www.github.com
  远程仓库
  1)注册登录
  2)新建远程仓库(是空的)
    单击右上角'+' 选择new repository-->在repository name
    框里输入远程仓库的名称-->点击create repository
  3)将本地仓库和远程仓库相关联
    git remote add origin 远程仓库地址.git
    add:表示添加关联
    origin:表示一个变量名(别名),方便后续操作的使用,指代后面的
    远程仓库地址.git 这个地址
    git remote:查看远程仓库
  4)将本地仓库的内容推送给远程仓库
    git push -u origin master
    -u:只在第一次推送的时候添加该元素,以后推送就不需要再添加了
    告诉远程仓库,创建一个master分支
    origin:关联本地与远程仓库时起的一个别名,指代远程仓库的地址
    关联时,可以起其他的别名,不一定是origin
    master:分支  
    第二次推送:git push
  5)删除远程仓库:settings
  6)删除本地仓库与远程仓库的关联
   git remote remove origin  
  密钥:
  公钥-私钥
  下载地址:shen111123/03_course


